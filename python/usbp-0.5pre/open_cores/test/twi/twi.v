// File: twi.v
// Generated by MyHDL 0.6
// Date: Sat Aug  8 14:49:34 2009

`timescale 1ns/10ps

module twi (
    clk_i,
    rst_i,
    cyc_i,
    stb_i,
    adr_i,
    we_i,
    sel_i,
    dat_i,
    dat_o,
    ack_o,
    fifo_di,
    fifo_do,
    fifo_do_vld,
    fifo_rd,
    fifo_wr,
    fifo_full,
    fifo_empty,
    scl_pad_i,
    scl_pad_o,
    sda_pad_i,
    sda_pad_o
);

input clk_i;
input rst_i;
input cyc_i;
input stb_i;
input [15:0] adr_i;
input we_i;
input sel_i;
input [7:0] dat_i;
output [7:0] dat_o;
reg [7:0] dat_o;
output ack_o;
wire ack_o;
input [7:0] fifo_di;
input [7:0] fifo_do;
input fifo_do_vld;
input fifo_rd;
input fifo_wr;
input fifo_full;
input fifo_empty;
input scl_pad_i;
input scl_pad_o;
input sda_pad_i;
input sda_pad_o;

wire [7:0] CTR;
reg rx_fifo_full;
wire [7:0] tx_fifo_di;
wire [7:0] tx_fifo_do;
wire [7:0] PRERhi;
wire ctr_txrst;
reg tx_fifo_full;
wire rx_fifo_wr;
wire tx_fifo_rd;
wire [7:0] PRERlo;
wire wb_acc;
wire reset;
reg rx_fifo_empty;
wire wb_wr;
wire [7:0] rx_fifo_do;
wire [7:0] rx_fifo_di;
wire [7:0] CR;
wire [7:0] RXR;
wire ctr_rxrst;
wire rx_fifo_rd;
wire [7:0] TXR;
wire tx_fifo_wr;
wire [7:0] SR;
reg tx_fifo_empty;
reg [2:0] txFifo_rp;
wire [2:0] txFifo_rp_p1;
reg txFifo_gb;
reg [2:0] txFifo_wp;
wire [2:0] txFifo_wp_p1;
reg [2:0] rxFifo_rp;
wire [2:0] rxFifo_rp_p1;
reg rxFifo_gb;
reg [2:0] rxFifo_wp;
wire [2:0] rxFifo_wp_p1;
reg regFile__wb_ack;
reg [7:0] regFile__wb_do;
wire regFile__wb_acc;
wire regFile__wb_wr;
reg regFile__wb_sel;

reg rwWr [0:5-1];
reg [7:0] rwRegisters [0:5-1];
reg [7:0] roRegisters [0:2-1];
reg rwRd [0:5-1];
reg [7:0] txFifo_mem [0:8-1];
reg [7:0] rxFifo_mem [0:8-1];

assign tx_fifo_di = 0;
assign rx_fifo_wr = 0;
assign tx_fifo_rd = 0;
assign reset = 0;
assign rx_fifo_di = 0;
assign RXR = 0;
assign rx_fifo_rd = 0;
assign tx_fifo_wr = 0;
assign SR = 0;

always @(posedge reset) begin: TWI_TXFIFO_RTL_GUARD_BIT
    if (clk_i) begin
        txFifo_gb <= 1'b0;
    end
    else begin
        if (ctr_txrst) begin
            txFifo_gb <= 1'b0;
        end
        else if (((txFifo_wp_p1 == txFifo_rp) && tx_fifo_wr)) begin
            txFifo_gb <= 1'b1;
        end
        else if (tx_fifo_rd) begin
            txFifo_gb <= 1'b0;
        end
    end
end

always @(posedge reset) begin: TWI_TXFIFO_RTL_WP_REG
    if (clk_i) begin
        txFifo_wp <= 0;
    end
    else begin
        if (ctr_txrst) begin
            txFifo_wp <= 0;
        end
        else begin
            txFifo_wp <= txFifo_wp_p1;
        end
    end
end

always @(posedge reset) begin: TWI_TXFIFO_RTL_RP_REG
    if (clk_i) begin
        txFifo_rp <= 0;
    end
    else begin
        if (ctr_txrst) begin
            txFifo_rp <= 0;
        end
        else if (tx_fifo_rd) begin
            txFifo_rp <= txFifo_rp_p1;
        end
    end
end

always @(posedge reset) begin: TWI_TXFIFO_RTL_MEM
    if (tx_fifo_wr) begin
        txFifo_mem[txFifo_wp] <= tx_fifo_di;
    end
end


assign txFifo_wp_p1 = ((txFifo_wp + 1) % (2 ** 3));


assign tx_fifo_do = txFifo_mem[txFifo_rp];


assign txFifo_rp_p1 = ((txFifo_rp + 1) % (2 ** 3));

always @(txFifo_rp, txFifo_gb, txFifo_wp) begin: TWI_TXFIFO_RTL_ASSIGNMENTS
    if (((txFifo_wp == txFifo_rp) && (!txFifo_gb))) begin
        tx_fifo_empty <= 1'b1;
    end
    else begin
        tx_fifo_empty <= 1'b0;
    end
    if (((txFifo_wp == txFifo_rp) && txFifo_gb)) begin
        tx_fifo_full <= 1'b1;
    end
    else begin
        tx_fifo_full <= 1'b0;
    end
end

always @(posedge reset) begin: TWI_RXFIFO_RTL_GUARD_BIT
    if (clk_i) begin
        rxFifo_gb <= 1'b0;
    end
    else begin
        if (ctr_rxrst) begin
            rxFifo_gb <= 1'b0;
        end
        else if (((rxFifo_wp_p1 == rxFifo_rp) && rx_fifo_wr)) begin
            rxFifo_gb <= 1'b1;
        end
        else if (rx_fifo_rd) begin
            rxFifo_gb <= 1'b0;
        end
    end
end

always @(posedge reset) begin: TWI_RXFIFO_RTL_WP_REG
    if (clk_i) begin
        rxFifo_wp <= 0;
    end
    else begin
        if (ctr_rxrst) begin
            rxFifo_wp <= 0;
        end
        else begin
            rxFifo_wp <= rxFifo_wp_p1;
        end
    end
end

always @(posedge reset) begin: TWI_RXFIFO_RTL_RP_REG
    if (clk_i) begin
        rxFifo_rp <= 0;
    end
    else begin
        if (ctr_rxrst) begin
            rxFifo_rp <= 0;
        end
        else if (rx_fifo_rd) begin
            rxFifo_rp <= rxFifo_rp_p1;
        end
    end
end

always @(posedge reset) begin: TWI_RXFIFO_RTL_MEM
    if (rx_fifo_wr) begin
        rxFifo_mem[rxFifo_wp] <= rx_fifo_di;
    end
end


assign rxFifo_wp_p1 = ((rxFifo_wp + 1) % (2 ** 3));


assign rx_fifo_do = rxFifo_mem[rxFifo_rp];


assign rxFifo_rp_p1 = ((rxFifo_rp + 1) % (2 ** 3));

always @(rxFifo_rp, rxFifo_gb, rxFifo_wp) begin: TWI_RXFIFO_RTL_ASSIGNMENTS
    if (((rxFifo_wp == rxFifo_rp) && (!rxFifo_gb))) begin
        rx_fifo_empty <= 1'b1;
    end
    else begin
        rx_fifo_empty <= 1'b0;
    end
    if (((rxFifo_wp == rxFifo_rp) && rxFifo_gb)) begin
        rx_fifo_full <= 1'b1;
    end
    else begin
        rx_fifo_full <= 1'b0;
    end
end


assign PRERhi = rwRegisters[0];
assign PRERlo = rwRegisters[1];
assign CTR = rwRegisters[2];
assign TXR = rwRegisters[3];
assign CR = rwRegisters[4];
assign roRegisters[0] = RXR;
assign roRegisters[1] = SR;


assign wb_wr = regFile__wb_wr;
assign wb_acc = regFile__wb_acc;


assign regFile__wb_wr = (regFile__wb_acc & we_i);


assign regFile__wb_acc = (cyc_i & stb_i);
assign ack_o = regFile__wb_ack;

always @(posedge clk_i) begin: TWI_REGFILE_RTL_WRITE_REG
    if ((!rst_i)) begin
        rwRegisters[0] <= 0;
        rwRegisters[1] <= 0;
        rwRegisters[2] <= 0;
        rwRegisters[3] <= 0;
        rwRegisters[4] <= 0;
    end
    else if ((regFile__wb_wr && regFile__wb_sel)) begin
        if ((adr_i == 0)) begin
            rwRegisters[0] <= dat_i;
        end
        else if ((adr_i == 1)) begin
            rwRegisters[1] <= dat_i;
        end
        else if ((adr_i == 2)) begin
            rwRegisters[2] <= dat_i;
        end
        else if ((adr_i == 3)) begin
            rwRegisters[3] <= dat_i;
        end
        else if ((adr_i == 5)) begin
            rwRegisters[4] <= dat_i;
        end
    end
end

always @(regFile__wb_sel, regFile__wb_do) begin: TWI_REGFILE_RTL_READ
    if (regFile__wb_sel) begin
        dat_o <= regFile__wb_do;
    end
    else begin
        dat_o <= 0;
    end
end

always @(posedge clk_i) begin: TWI_REGFILE_RTL_READ_REG
    if ((adr_i == 0)) begin
        regFile__wb_do <= rwRegisters[0];
    end
    else if ((adr_i == 1)) begin
        regFile__wb_do <= rwRegisters[1];
    end
    else if ((adr_i == 2)) begin
        regFile__wb_do <= rwRegisters[2];
    end
    else if ((adr_i == 3)) begin
        regFile__wb_do <= rwRegisters[3];
    end
    else if ((adr_i == 5)) begin
        regFile__wb_do <= rwRegisters[4];
    end
    if ((adr_i == 4)) begin
        regFile__wb_do <= roRegisters[0];
    end
    else if ((adr_i == 6)) begin
        regFile__wb_do <= roRegisters[1];
    end
end

always @(posedge clk_i) begin: TWI_REGFILE_RTL_SELECTED
    if (((adr_i > 0) && (adr_i < 6))) begin
        regFile__wb_sel <= 1'b1;
    end
    else begin
        regFile__wb_sel <= 1'b0;
    end
end

always @(posedge clk_i) begin: TWI_REGFILE_RTL_RW_STOBES
    if (((adr_i == 0) && regFile__wb_ack)) begin
        if (regFile__wb_wr) begin
            rwWr[0] <= 1'b1;
            rwRd[0] <= 1'b0;
        end
        else begin
            rwWr[0] <= 1'b0;
            rwRd[0] <= 1'b1;
        end
    end
    else begin
        rwWr[0] <= 1'b0;
        rwRd[0] <= 1'b0;
    end
    if (((adr_i == 1) && regFile__wb_ack)) begin
        if (regFile__wb_wr) begin
            rwWr[1] <= 1'b1;
            rwRd[1] <= 1'b0;
        end
        else begin
            rwWr[1] <= 1'b0;
            rwRd[1] <= 1'b1;
        end
    end
    else begin
        rwWr[1] <= 1'b0;
        rwRd[1] <= 1'b0;
    end
    if (((adr_i == 2) && regFile__wb_ack)) begin
        if (regFile__wb_wr) begin
            rwWr[2] <= 1'b1;
            rwRd[2] <= 1'b0;
        end
        else begin
            rwWr[2] <= 1'b0;
            rwRd[2] <= 1'b1;
        end
    end
    else begin
        rwWr[2] <= 1'b0;
        rwRd[2] <= 1'b0;
    end
    if (((adr_i == 3) && regFile__wb_ack)) begin
        if (regFile__wb_wr) begin
            rwWr[3] <= 1'b1;
            rwRd[3] <= 1'b0;
        end
        else begin
            rwWr[3] <= 1'b0;
            rwRd[3] <= 1'b1;
        end
    end
    else begin
        rwWr[3] <= 1'b0;
        rwRd[3] <= 1'b0;
    end
    if (((adr_i == 5) && regFile__wb_ack)) begin
        if (regFile__wb_wr) begin
            rwWr[4] <= 1'b1;
            rwRd[4] <= 1'b0;
        end
        else begin
            rwWr[4] <= 1'b0;
            rwRd[4] <= 1'b1;
        end
    end
    else begin
        rwWr[4] <= 1'b0;
        rwRd[4] <= 1'b0;
    end
end

always @(posedge clk_i) begin: TWI_REGFILE_RTL_ACK
    if ((!rst_i)) begin
        regFile__wb_ack <= 1'b0;
    end
    else begin
        regFile__wb_ack <= (regFile__wb_acc & (~regFile__wb_ack));
    end
end


assign ctr_rxrst = CTR[3];
assign ctr_txrst = CTR[4];

endmodule
