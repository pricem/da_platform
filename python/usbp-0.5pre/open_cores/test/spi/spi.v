// File: spi.v
// Generated by MyHDL 0.6
// Date: Sat Aug  8 14:51:32 2009

`timescale 1ns/10ps

module spi (
    clk_i,
    rst_i,
    cyc_i,
    stb_i,
    adr_i,
    we_i,
    sel_i,
    dat_i,
    dat_o,
    ack_o,
    fifo_di,
    fifo_do,
    fifo_do_vld,
    fifo_rd,
    fifo_wr,
    fifo_full,
    fifo_empty,
    SS,
    SCK,
    MOSI,
    MISO
);

input clk_i;
input rst_i;
input cyc_i;
input stb_i;
input [15:0] adr_i;
input we_i;
input sel_i;
input [7:0] dat_i;
output [7:0] dat_o;
reg [7:0] dat_o;
output ack_o;
wire ack_o;
output [7:0] fifo_di;
reg [7:0] fifo_di;
input [7:0] fifo_do;
input fifo_do_vld;
output fifo_rd;
reg fifo_rd;
output fifo_wr;
reg fifo_wr;
input fifo_full;
input fifo_empty;
output [7:0] SS;
reg [7:0] SS;
output SCK;
reg SCK;
output MOSI;
reg MOSI;
input MISO;

wire [7:0] SPTC;
reg _fifo_full;
reg _fifo_wr;
wire [7:0] SPTX;
wire [7:0] tx_fifo_di;
wire [7:0] tx_fifo_do;
reg rx_fifo_wr;
wire cr_msse;
reg [1:0] state;
wire [7:0] SPSR;
wire [7:0] SPSS;
wire cr_freeze;
reg rx_fifo_full;
reg [11:0] clkcnt;
reg tx_fifo_rd;
wire wb_acc;
reg reset;
wire cr_rxrst;
reg rx_fifo_empty;
reg ena;
wire wb_wr;
reg _fifo_rd;
reg rx_fifo_rd;
reg tx_fifo_full;
wire cr_wb_sel;
wire cr_spe;
wire [7:0] rx_fifo_do;
reg [7:0] rx_fifo_di;
wire cr_cpha;
reg _fifo_empty;
wire cr_cpol;
reg _miso;
reg [7:0] _fifo_do;
wire cr_txrst;
wire [7:0] SPRX;
reg [7:0] treg;
reg tx_fifo_wr;
reg [2:0] bcnt;
wire [7:0] SPXX;
reg _sck;
reg _ss;
wire [7:0] SPRC;
reg tx_fifo_empty;
wire [7:0] SPCR;
wire cr_loop;
reg [2:0] txFifo_rp;
wire [2:0] txFifo_rp_p1;
reg txFifo_gb;
reg [2:0] txFifo_wp;
wire [2:0] txFifo_wp_p1;
reg [2:0] rxFifo_rp;
wire [2:0] rxFifo_rp_p1;
reg rxFifo_gb;
reg [2:0] rxFifo_wp;
wire [2:0] rxFifo_wp_p1;
reg regFile__wb_ack;
reg [7:0] regFile__wb_do;
wire regFile__wb_acc;
wire regFile__wb_wr;
reg regFile__wb_sel;

reg rwWr [0:4-1];
reg roRd [0:4-1];
reg [7:0] rwRegisters [0:4-1];
reg [7:0] roRegisters [0:4-1];
reg rwRd [0:4-1];
reg [7:0] txFifo_mem [0:8-1];
reg [7:0] rxFifo_mem [0:8-1];

assign SPTC = 0;
assign SPRC = 0;

always @(posedge reset) begin: SPI_TXFIFO_RTL_GUARD_BIT
    if (clk_i) begin
        txFifo_gb <= 1'b0;
    end
    else begin
        if (cr_txrst) begin
            txFifo_gb <= 1'b0;
        end
        else if (((txFifo_wp_p1 == txFifo_rp) && tx_fifo_wr)) begin
            txFifo_gb <= 1'b1;
        end
        else if (tx_fifo_rd) begin
            txFifo_gb <= 1'b0;
        end
    end
end

always @(posedge reset) begin: SPI_TXFIFO_RTL_WP_REG
    if (clk_i) begin
        txFifo_wp <= 0;
    end
    else begin
        if (cr_txrst) begin
            txFifo_wp <= 0;
        end
        else begin
            txFifo_wp <= txFifo_wp_p1;
        end
    end
end

always @(posedge reset) begin: SPI_TXFIFO_RTL_RP_REG
    if (clk_i) begin
        txFifo_rp <= 0;
    end
    else begin
        if (cr_txrst) begin
            txFifo_rp <= 0;
        end
        else if (tx_fifo_rd) begin
            txFifo_rp <= txFifo_rp_p1;
        end
    end
end

always @(posedge reset) begin: SPI_TXFIFO_RTL_MEM
    if (tx_fifo_wr) begin
        txFifo_mem[txFifo_wp] <= tx_fifo_di;
    end
end


assign txFifo_wp_p1 = ((txFifo_wp + 1) % (2 ** 3));


assign tx_fifo_do = txFifo_mem[txFifo_rp];


assign txFifo_rp_p1 = ((txFifo_rp + 1) % (2 ** 3));

always @(txFifo_rp, txFifo_gb, txFifo_wp) begin: SPI_TXFIFO_RTL_ASSIGNMENTS
    if (((txFifo_wp == txFifo_rp) && (!txFifo_gb))) begin
        tx_fifo_empty <= 1'b1;
    end
    else begin
        tx_fifo_empty <= 1'b0;
    end
    if (((txFifo_wp == txFifo_rp) && txFifo_gb)) begin
        tx_fifo_full <= 1'b1;
    end
    else begin
        tx_fifo_full <= 1'b0;
    end
end

always @(clkcnt, rst_i) begin: SPI_RTL_ASSIGNMENT
    reset <= (!rst_i);
    if ((clkcnt > 0)) begin
        ena <= 1'b0;
    end
    else begin
        ena <= 1'b1;
    end
end


assign SPCR = rwRegisters[0];
assign SPTX = rwRegisters[1];
assign SPSS = rwRegisters[2];
assign SPXX = rwRegisters[3];
assign roRegisters[0] = SPSR;
assign roRegisters[1] = SPRX;
assign roRegisters[2] = SPTC;
assign roRegisters[3] = SPRC;

always @(posedge clk_i) begin: SPI_RTL_STATE_AND_MORE
    if ((!cr_spe)) begin
        state <= 0;
        bcnt <= 0;
        treg <= 0;
        _fifo_rd <= 1'b0;
        _fifo_wr <= 1'b0;
        _sck <= 1'b0;
        _ss <= 1'b0;
    end
    else if ((!cr_freeze)) begin
        if ((state == 0)) begin
            bcnt <= 7;
            treg <= _fifo_do;
            _sck <= cr_cpol;
            _ss <= 1'b1;
            if (((!_fifo_empty) && (!_fifo_full))) begin
                _fifo_rd <= 1'b1;
                state <= 1;
                _ss <= 1'b0;
                if (cr_cpha) begin
                    _sck <= (!_sck);
                end
            end
        end
        if ((state == 1)) begin
            if (ena) begin
                state <= 3;
                _sck <= (!_sck);
            end
        end
        if ((state == 3)) begin
            if (ena) begin
                treg <= {_miso, treg[8-1:1]};
                bcnt <= (bcnt - 1);
            end
            if ((bcnt == 0)) begin
                state <= 0;
                _sck <= cr_cpol;
                _ss <= 1'b1;
                _fifo_wr <= 1'b1;
            end
            else begin
                state <= 1;
                _sck <= (!_sck);
            end
        end
        if ((state == 2)) begin
            state <= 0;
        end
    end
end

always @(MISO, cr_msse, treg, SPSS, _sck, _ss, cr_loop) begin: SPI_RTL_SPI_SIGS
    reg _miso_next;
    SCK <= _sck;
    if (cr_loop) begin
        MOSI <= 1'b0;
        _miso_next = treg[0];
    end
    else begin
        MOSI <= treg[0];
        _miso <= MISO;
    end
    if (cr_msse) begin
        SS <= (~SPSS);
    end
    else begin
        if (_ss) begin
            SS <= 255;
        end
        else begin
            SS <= (~SPSS);
        end
    end
end

always @(posedge clk_i) begin: SPI_RTL_CLK_DIV
    if ((cr_spe && (clkcnt != 0) && (state != 0))) begin
        clkcnt <= ((clkcnt - 1) % (2 ** 12));
    end
    else begin
        if ((SPXX == 0)) begin
            clkcnt <= 0;
        end
        else if ((SPXX == 1)) begin
            clkcnt <= 1;
        end
        else if ((SPXX == 2)) begin
            clkcnt <= 3;
        end
        else if ((SPXX == 3)) begin
            clkcnt <= 7;
        end
        else if ((SPXX == 4)) begin
            clkcnt <= 15;
        end
        else if ((SPXX == 5)) begin
            clkcnt <= 31;
        end
        else if ((SPXX == 6)) begin
            clkcnt <= 63;
        end
        else if ((SPXX == 7)) begin
            clkcnt <= 127;
        end
        else if ((SPXX == 8)) begin
            clkcnt <= 255;
        end
        else if ((SPXX == 9)) begin
            clkcnt <= 511;
        end
        else if ((SPXX == 10)) begin
            clkcnt <= 1023;
        end
        else if ((SPXX == 11)) begin
            clkcnt <= 2047;
        end
    end
end


assign cr_loop = SPCR[0];
assign cr_spe = SPCR[1];
assign cr_cpol = SPCR[3];
assign cr_cpha = SPCR[4];
assign cr_txrst = SPCR[5];
assign cr_rxrst = SPCR[6];
assign cr_msse = SPCR[7];
assign cr_freeze = SPCR[8];
assign cr_wb_sel = SPCR[9];
assign SPSR[0] = rx_fifo_empty;
assign SPSR[1] = rx_fifo_full;
assign SPSR[2] = tx_fifo_empty;
assign SPSR[3] = tx_fifo_full;
assign SPSR[4] = 1'b0;

always @(posedge reset) begin: SPI_RXFIFO_RTL_GUARD_BIT
    if (clk_i) begin
        rxFifo_gb <= 1'b0;
    end
    else begin
        if (cr_rxrst) begin
            rxFifo_gb <= 1'b0;
        end
        else if (((rxFifo_wp_p1 == rxFifo_rp) && rx_fifo_wr)) begin
            rxFifo_gb <= 1'b1;
        end
        else if (rx_fifo_rd) begin
            rxFifo_gb <= 1'b0;
        end
    end
end

always @(posedge reset) begin: SPI_RXFIFO_RTL_WP_REG
    if (clk_i) begin
        rxFifo_wp <= 0;
    end
    else begin
        if (cr_rxrst) begin
            rxFifo_wp <= 0;
        end
        else begin
            rxFifo_wp <= rxFifo_wp_p1;
        end
    end
end

always @(posedge reset) begin: SPI_RXFIFO_RTL_RP_REG
    if (clk_i) begin
        rxFifo_rp <= 0;
    end
    else begin
        if (cr_rxrst) begin
            rxFifo_rp <= 0;
        end
        else if (rx_fifo_rd) begin
            rxFifo_rp <= rxFifo_rp_p1;
        end
    end
end

always @(posedge reset) begin: SPI_RXFIFO_RTL_MEM
    if (rx_fifo_wr) begin
        rxFifo_mem[rxFifo_wp] <= rx_fifo_di;
    end
end


assign rxFifo_wp_p1 = ((rxFifo_wp + 1) % (2 ** 3));


assign rx_fifo_do = rxFifo_mem[rxFifo_rp];


assign rxFifo_rp_p1 = ((rxFifo_rp + 1) % (2 ** 3));

always @(rxFifo_rp, rxFifo_gb, rxFifo_wp) begin: SPI_RXFIFO_RTL_ASSIGNMENTS
    if (((rxFifo_wp == rxFifo_rp) && (!rxFifo_gb))) begin
        rx_fifo_empty <= 1'b1;
    end
    else begin
        rx_fifo_empty <= 1'b0;
    end
    if (((rxFifo_wp == rxFifo_rp) && rxFifo_gb)) begin
        rx_fifo_full <= 1'b1;
    end
    else begin
        rx_fifo_full <= 1'b0;
    end
end


assign wb_wr = regFile__wb_wr;
assign wb_acc = regFile__wb_acc;


assign regFile__wb_wr = (regFile__wb_acc & we_i);


assign regFile__wb_acc = (cyc_i & stb_i);
assign ack_o = regFile__wb_ack;

always @(posedge clk_i) begin: SPI_REGFILE_RTL_WRITE_REG
    if ((!rst_i)) begin
        rwRegisters[0] <= 384;
        rwRegisters[1] <= 0;
        rwRegisters[2] <= 0;
        rwRegisters[3] <= 0;
    end
    else if ((regFile__wb_wr && regFile__wb_sel)) begin
        if ((adr_i == 96)) begin
            rwRegisters[0] <= dat_i;
        end
        else if ((adr_i == 104)) begin
            rwRegisters[1] <= dat_i;
        end
        else if ((adr_i == 112)) begin
            rwRegisters[2] <= dat_i;
        end
        else if ((adr_i == 124)) begin
            rwRegisters[3] <= dat_i;
        end
    end
end

always @(regFile__wb_sel, regFile__wb_do) begin: SPI_REGFILE_RTL_READ
    if (regFile__wb_sel) begin
        dat_o <= regFile__wb_do;
    end
    else begin
        dat_o <= 0;
    end
end

always @(posedge clk_i) begin: SPI_REGFILE_RTL_READ_REG
    if ((adr_i == 96)) begin
        regFile__wb_do <= rwRegisters[0];
    end
    else if ((adr_i == 104)) begin
        regFile__wb_do <= rwRegisters[1];
    end
    else if ((adr_i == 112)) begin
        regFile__wb_do <= rwRegisters[2];
    end
    else if ((adr_i == 124)) begin
        regFile__wb_do <= rwRegisters[3];
    end
    if ((adr_i == 100)) begin
        regFile__wb_do <= roRegisters[0];
    end
    else if ((adr_i == 108)) begin
        regFile__wb_do <= roRegisters[1];
    end
    else if ((adr_i == 116)) begin
        regFile__wb_do <= roRegisters[2];
    end
    else if ((adr_i == 120)) begin
        regFile__wb_do <= roRegisters[3];
    end
end

always @(posedge clk_i) begin: SPI_REGFILE_RTL_SELECTED
    if (((adr_i > 96) && (adr_i < 124))) begin
        regFile__wb_sel <= 1'b1;
    end
    else begin
        regFile__wb_sel <= 1'b0;
    end
end

always @(posedge clk_i) begin: SPI_REGFILE_RTL_RW_STOBES
    if (((adr_i == 96) && regFile__wb_ack)) begin
        if (regFile__wb_wr) begin
            rwWr[0] <= 1'b1;
            rwRd[0] <= 1'b0;
        end
        else begin
            rwWr[0] <= 1'b0;
            rwRd[0] <= 1'b1;
        end
    end
    else begin
        rwWr[0] <= 1'b0;
        rwRd[0] <= 1'b0;
    end
    if (((adr_i == 104) && regFile__wb_ack)) begin
        if (regFile__wb_wr) begin
            rwWr[1] <= 1'b1;
            rwRd[1] <= 1'b0;
        end
        else begin
            rwWr[1] <= 1'b0;
            rwRd[1] <= 1'b1;
        end
    end
    else begin
        rwWr[1] <= 1'b0;
        rwRd[1] <= 1'b0;
    end
    if (((adr_i == 112) && regFile__wb_ack)) begin
        if (regFile__wb_wr) begin
            rwWr[2] <= 1'b1;
            rwRd[2] <= 1'b0;
        end
        else begin
            rwWr[2] <= 1'b0;
            rwRd[2] <= 1'b1;
        end
    end
    else begin
        rwWr[2] <= 1'b0;
        rwRd[2] <= 1'b0;
    end
    if (((adr_i == 124) && regFile__wb_ack)) begin
        if (regFile__wb_wr) begin
            rwWr[3] <= 1'b1;
            rwRd[3] <= 1'b0;
        end
        else begin
            rwWr[3] <= 1'b0;
            rwRd[3] <= 1'b1;
        end
    end
    else begin
        rwWr[3] <= 1'b0;
        rwRd[3] <= 1'b0;
    end
end

always @(posedge clk_i) begin: SPI_REGFILE_RTL_ACK
    if ((!rst_i)) begin
        regFile__wb_ack <= 1'b0;
    end
    else begin
        regFile__wb_ack <= (regFile__wb_acc & (~regFile__wb_ack));
    end
end

always @(fifo_empty, rx_fifo_full, tx_fifo_empty, roRd[0], roRd[1], roRd[2], roRd[3], fifo_full, treg, _fifo_wr, cr_wb_sel, rwWr[0], rwWr[1], rwWr[2], rwWr[3], tx_fifo_do, fifo_do, _fifo_rd) begin: SPI_RTL_FIFO_SEL
    if (cr_wb_sel) begin
        _fifo_empty <= tx_fifo_empty;
        _fifo_full <= rx_fifo_full;
        _fifo_do <= tx_fifo_do;
        tx_fifo_rd <= _fifo_rd;
        rx_fifo_wr <= _fifo_wr;
        rx_fifo_di <= treg;
        tx_fifo_wr <= rwWr[1];
        rx_fifo_rd <= roRd[1];
        fifo_rd <= 1'b0;
        fifo_wr <= 1'b0;
        fifo_di <= 0;
    end
    else begin
        _fifo_empty <= fifo_empty;
        _fifo_full <= fifo_full;
        _fifo_do <= fifo_do;
        tx_fifo_rd <= 1'b0;
        rx_fifo_wr <= 1'b0;
        rx_fifo_di <= 0;
        tx_fifo_wr <= 1'b0;
        rx_fifo_rd <= 1'b0;
        fifo_rd <= _fifo_rd;
        fifo_wr <= _fifo_wr;
        fifo_di <= treg;
    end
end


assign tx_fifo_di = SPTX;
assign SPRX = rx_fifo_do;

endmodule
